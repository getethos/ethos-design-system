@import '../Animation.scss';
@import '../Variables.scss';

.Container {
  /* depth is used to indicate width or height depending on the orientation of the
  drawer -- e.g. if it's positioned left depth is the width; if top depth is height */
  --default-drawer-depth: 375px;
  --default-drawer-padding: 0 var(--Space-24) var(--Space-32);
  --default-drawer-box-shadow: var(--Space-10) 0px var(--Space-10)
    rgba(0, 0, 0, 0);

  padding: var(--drawer-override-padding, var(--default-drawer-padding));
  background-color: var(--White);
  transition: transform var(--transition-duration-short);
  position: fixed;
  overflow: auto;
  top: 0;
  z-index: 1;
  box-shadow: var(
    --drawer-override-box-shadow,
    var(--default-drawer-box-shadow)
  );
}

.DrawerWrapper {
  display: none;
}

.DrawerWrapperActive {
  align-items: center;
  background: transparent;
  display: flex;
  height: 100vh;
  width: 100vw;
  justify-content: center;
  left: 0;
  position: fixed;
  top: 0;
  z-index: $z-index-modal;
}

/* When lock prop passed in, they've asked to not allow outside clicks and escape
to close the drawer. Additionally, we'd like to make any outside content editable
so we remove the 100vh / 100vw by setting to default values here */
.DrawerWrapperLocked {
  height: initial;
  width: initial;
}

.Sidebars {
  height: 100vh;
  width: var(--drawer-override-depth, var(--default-drawer-depth));
}

.Left {
  composes: Sidebars;
  left: 0;
  transform: translate(
    calc(var(--drawer-override-depth, var(--default-drawer-depth)) * -1)
  );
}

.Right {
  composes: Sidebars;
  right: 0;
  transform: translate(
    var(--drawer-override-depth, var(--default-drawer-depth))
  );
}

.Horizontals {
  width: 100vw;
  height: var(--drawer-override-depth, var(--default-drawer-depth));
}

.Top {
  composes: Horizontals;
  top: 0;
  bottom: initial;
}

.Bottom {
  composes: Horizontals;
  bottom: 0;
  top: initial;
}

.Open {
  transform: translate(0);
  box-shadow: unset;
  box-shadow: var(--Space-10) 0px var(--Space-10) rgba(0, 0, 0, 0.2);
}
.Open.Right {
  box-shadow: -10px 0px var(--Space-10) rgba(0, 0, 0, 0.2);
}
