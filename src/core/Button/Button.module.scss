@import '../Media/Media.scss';

/* This is currently a one-off implementation for UniversalNavbar */
@import './Button.small.shame.scss';

/* Defaults */

:root {
  --ButtonMediumStatefulMinWidth: 156px;
}

.Button {
  border: 1px solid transparent;
  font-family: var(--Theinhardt-font-stack);
  color: var(--GrayPrimary--translucent);
  path {
    fill: var(--GrayPrimary--translucent);
  }

  transition: var(--transition-default);
  transition-property: background-color, border-color, color;

  &:not([disabled]) {
    cursor: pointer;
  }
}

/* Dimensions */

.Button.Medium {
  $font-size: 19;
  $line-height: 24;
  font-size: $font-size * 1px;
  line-height: $line-height / $font-size;
  padding: 17px var(--Space-16) 13px;
}

.Button.fullWidth {
  width: 100%;
}

.arrowIconInline {
  margin-right: 3px;
  margin-top: 2px;
  margin-left: 7px;
}

.backArrowIconInline {
  margin-right: 10px;
  margin-top: 3px;
  margin-left: 4px;
  transform: rotate(180deg);
}

.Button.arrowIcon {
  display: flex;
  justify-content: space-between;
}

.Button.arrowIcon.fullWidth {
  @include for-tablet-and-laptop {
    padding-right: 40px;
    padding-left: 40px;
  }
  @include for-desktop-only {
    padding-right: 48px;
    padding-left: 48px;
  }
}

/* Styles */

@mixin light-on-dark-font-smoothing {
  /* stackoverflow.com/a/17927764 */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.Button.Unstyled {
  background: none;
  border: none;
  padding: 0;
  .arrowIconInline {
    margin-top: 1px;
  }

  .backArrowIconInline {
    margin-top: 1px;
  }
}

.Button.Black {
  background-color: var(--GrayPrimary--translucent);
  color: var(--White);
  path {
    fill: var(--White);
  }
  @include light-on-dark-font-smoothing;

  &:not([disabled]) {
    &:hover {
      background-color: var(--GrayDarkHover--translucent);
    }

    &:active {
      background-color: var(--GrayDarkHover--translucent);
    }
  }

  &[disabled] {
    border-color: var(--Transparent--white);
    background-color: var(--GrayStrokeAndDisabled--translucent);
    color: var(--White);
    path {
      fill: var(--White);
    }
  }
}

.Button.BlackOutline {
  border-color: var(--GrayPrimary--opaque);
  background-color: var(--Transparent--white);
  color: var(--GrayPrimary--opaque);
  path {
    fill: var(--GrayPrimary--opaque);
  }

  &:not([disabled]) {
    &:hover {
      border-color: var(--GrayDarkHover--translucent);
      background-color: var(--GrayDarkHover--translucent);
      color: var(--White);
      path {
        fill: var(--White);
      }
    }

    &:active {
      border-color: var(--GrayDarkHover--translucent);
      background-color: var(--GrayDarkHover--translucent);
      color: var(--White);
      path {
        fill: var(--White);
      }
    }
  }

  &[disabled] {
    border-color: var(--Transparent--white);
    background-color: var(--GrayStrokeAndDisabled--translucent);
    color: var(--White);
    path {
      fill: var(--White);
    }
  }
}

.Button.WhiteOutline {
  border-color: var(--White);
  background-color: var(--Transparent--white);
  color: var(--White);
  path {
    fill: var(--White);
  }

  &:not([disabled]) {
    &:hover {
      border-color: var(--White);
      background-color: var(--White);
      color: var(--GrayPrimary--translucent);
      path {
        fill: var(--GrayPrimary--translucent);
      }
    }

    &:active {
      border-color: var(--White);
      background-color: var(--White);
      color: var(--GrayPrimary--translucent);
      path {
        fill: var(--GrayPrimary--translucent);
      }
    }
  }

  &[disabled] {
    border-color: var(--Transparent--white);
    background-color: var(--GrayStrokeAndDisabled--translucent);
    color: var(--White);
    path {
      fill: var(--White);
    }
  }
}

/* Purposely very specific name WhiteCTA as this is currently */
/* only used on the CMS hero for the CTA 'Check my price' button */
.Button.WhiteCTA {
  background: var(--White);
  padding: var(--Space-16) var(--Space-32);
  @include for-phone-only {
    width: 100%;
  }
  @include for-tablet-and-up {
    width: auto;
  }
  &:hover,
  &:active {
    background: var(--GrayStrokeAndDisabled--opaque);
  }
}

.Button.Stateful {
  &.Medium {
    min-width: var(--ButtonMediumStatefulMinWidth);
  }

  &.White {
    background-color: var(--White);
  }

  @mixin button-stateful-is-active-or-selected {
    /* These are used in both the HTML "active" state (mid-click), as well as */
    /* the custom "is selected" state (this button is in the "on" state). */
    border-color: var(--BrandForest);
    background-color: var(--BrandForest);
    color: var(--White);
    path {
      fill: var(--White);
    }
  }

  border-color: var(--GrayStrokeAndDisabled--translucent);
  background-color: var(--Transparent--white);
  color: var(--GrayPrimary--translucent);
  path {
    fill: var(--GrayPrimary--translucent);
  }

  &:not([disabled]) {
    &:hover {
      border-color: var(--GrayStrokeAndDisabled--translucent);
      background-color: var(--GrayLightHover--translucent);
      color: var(--GrayPrimary--translucent);
      path {
        fill: var(--GrayPrimary--translucent);
      }
    }

    /* Bugfix: Need this one to have more specificity then ^ hover */
    &.isSelected {
      @include button-stateful-is-active-or-selected;
    }

    &:active {
      @include button-stateful-is-active-or-selected;
    }
  }

  &[disabled] {
    border-color: var(--Transparent--white);
    background-color: var(--GrayStrokeAndDisabled--translucent);
    color: var(--White);
    path {
      fill: var(--White);
    }
  }

  /*
  This class will be applied with the button is in the "selected" state, e.g.
  after the user clicks it, or if they have previously selected this value.
  Note thatthese styles should appear even if the button is disabled, though
  this probably only makes sense for `.isSelected` (not `:active`).
  */
  &.isSelected {
    @include button-stateful-is-active-or-selected;
  }
}
