/* @getethos/design-system/Buttons.scss
   ========================================================================== */

// Defaults

:root {
  --ButtonMediumStatefulMinWidth: 156px;
  --ButtonSmallStatefulMinWidth: 104px;
}

button,
.Button {
  border: 1px solid transparent;

  transition: var(--transition-default);
  transition-property: background-color, border-color, color;

  &:not([disabled]) {
    cursor: pointer;
  }
}

// Dimensions

.Button.Small {
  $font-size: 17;
  $line-height: 24;
  font-size: $font-size * 1px;
  line-height: $line-height / $font-size;
  padding: 17px 16px 13px;
}

.Button.Medium {
  $font-size: 19;
  $line-height: 24;
  font-size: $font-size * 1px;
  line-height: $line-height / $font-size;
  padding: 17px 16px 13px;
}

.Button.fullWidth {
  width: 100%;
}

// Styles

@mixin light-on-dark-font-smoothing {
  -webkit-font-smoothing: antialiased; // stackoverflow.com/a/17927764
  -moz-osx-font-smoothing: grayscale;
}

.Button.Unstyled {
  background: none;
  border: none;
  padding: 0;
}

.Button.Black {
  background-color: var(--GrayPrimary--translucent);
  color: var(--White);
  @include light-on-dark-font-smoothing;

  &:not([disabled]) {
    &:hover {
      background-color: var(--GrayDarkHover--translucent);
    }

    &:active {
      background-color: var(--GrayDarkHover--translucent);
    }
  }

  &[disabled] {
    border-color: var(--Transparent--white);
    background-color: var(--GrayStrokeAndDisabled--translucent);
    color: var(--White);
  }
}

.Button.BlackOutline {
  border-color: var(--GrayPrimary--opaque);
  background-color: var(--Transparent--white);
  color: var(--GrayPrimary--opaque);

  &:not([disabled]) {
    &:hover {
      border-color: var(--GrayDarkHover--translucent);
      background-color: var(--GrayDarkHover--translucent);
      color: var(--White);
    }

    &:active {
      border-color: var(--GrayDarkHover--translucent);
      background-color: var(--GrayDarkHover--translucent);
      color: var(--White);
    }
  }

  &[disabled] {
    border-color: var(--Transparent--white);
    background-color: var(--GrayStrokeAndDisabled--translucent);
    color: var(--White);
  }
}

.Button.WhiteOutline {
  border-color: var(--White);
  background-color: var(--Transparent--white);
  color: var(--White);

  &:not([disabled]) {
    &:hover {
      border-color: var(--White);
      background-color: var(--White);
      color: var(--GrayPrimary--translucent);
    }

    &:active {
      border-color: var(--White);
      background-color: var(--White);
      color: var(--GrayPrimary--translucent);
    }
  }

  &[disabled] {
    border-color: var(--Transparent--white);
    background-color: var(--GrayStrokeAndDisabled--translucent);
    color: var(--White);
  }
}

.Button.Stateful {
  &.Medium {
    min-width: var(--ButtonMediumStatefulMinWidth);
  }

  &.Small {
    min-width: var(--ButtonSmallStatefulMinWidth);
  }

  @mixin button-stateful-is-active-or-selected {
    // These are used in both the HTML "active" state (mid-click), as well as
    // the custom "is selected" state (this button is in the "on" state).
    border-color: var(--BrandForest);
    background-color: var(--BrandForest);
    color: var(--White);
  }

  border-color: var(--GrayStrokeAndDisabled--translucent);
  background-color: var(--White);
  color: var(--GrayPrimary--translucent);

  &:not([disabled]) {
    &:hover {
      border-color: var(--GrayStrokeAndDisabled--translucent);
      background-color: var(--GrayLightHover--translucent);
      color: var(--GrayPrimary--translucent);
    }

    &:active {
      @include button-stateful-is-active-or-selected;
    }
  }

  &[disabled] {
    border-color: var(--Transparent--white);
    background-color: var(--GrayStrokeAndDisabled--translucent);
    color: var(--White);
  }

  // This class will be applied with the button is in the "selected" state, e.g.
  // after the user clicks it, or if they have previously selected this value.
  // Note thatthese styles should appear even if the button is disabled, though
  // this probably only makes sense for `.isSelected` (not `:active`).
  &.isSelected {
    @include button-stateful-is-active-or-selected;
  }
}
